package com.example.javafx;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.StrokeType;

public class Controller {

    @FXML
    private GridPane tablero;
    @FXML
    private Circle turnoCircle;
    @FXML
    private Circle jugadorActualCircle;


    @FXML
    private Button button1;
    @FXML
    private Button button2;
    @FXML
    private Button button3;
    @FXML
    private Button button4;
    @FXML
    private Button button5;
    @FXML
    private Button button6;
    @FXML
    private Button button7;

    @FXML
    private TextField nomjugador1;
    @FXML
    private TextField nomjugador2;

    private int fila = 6;
    private int columna = 7;

    private int[][] matrizTablero = new int[fila][columna];
    private int jugadorActual = 1;

    @FXML
    public void handleIniciarPartida(ActionEvent event) {

        button1.setVisible(true);
        button2.setVisible(true);
        button3.setVisible(true);
        button4.setVisible(true);
        button5.setVisible(true);
        button6.setVisible(true);
        button7.setVisible(true);
    }


    @FXML
    public void handleClick(ActionEvent event) {
        if (event.getSource() instanceof Button) {
            Button clickedButton = (Button) event.getSource();

            Integer columnIndex = GridPane.getColumnIndex(clickedButton);


            if (columnIndex != null) {
                int columna = columnIndex.intValue();

                agregarFicha(columna);
            }
        }
    }

    private void agregarFicha(int columnIndex) {
        for (int row = 5; row >= 0; row--) {
            if (matrizTablero[row][columnIndex] == 0) {

                matrizTablero[row][columnIndex] = jugadorActual;


                Circle circle = new Circle(50.0);
                circle.setStroke(Color.BLACK);
                circle.setStrokeType(StrokeType.INSIDE);
                if (jugadorActual == 1) {
                    circle.setFill(Color.RED);
                } else {
                    circle.setFill(Color.YELLOW);
                }

                tablero.add(circle, columnIndex, row);


                if (verificarGanador(row, columnIndex)) {
                    if (jugadorActual == 1){
                        mostrarAlerta("¡Jugador " + nomjugador1.getText() + " ha ganado!");
                    } else {
                        mostrarAlerta("¡Jugador " + nomjugador2.getText() + " ha ganado!");
                    }

                }


                jugadorActual = (jugadorActual == 1) ? 2 : 1;
                turnoActual();


                break;
            }
        }
    }

    private void turnoActual() {
        // Obtén el color del jugador actual
        String color;
        if (jugadorActual == 1) {
            color = "RED";
        } else if (jugadorActual == 2) {
            color = "YELLOW";
        }else{
            color = "WHITE";
        }

        jugadorActualCircle.setFill(Color.valueOf(color));


    }





    private boolean verificarGanador(int row, int column) {
        return checkColumn(jugadorActual, column) ||
                checkRow(jugadorActual, row) ||
                checkDiagonal(jugadorActual, row, column);


    }



    private boolean checkColumn(int player, int col) {
        int count = 0;
        for (int i = 0; i < fila; i++) {
            if (matrizTablero[i][col] == player) {
                count++;
                if (count == 4) {
                    return true;
                }
            } else {
                count = 0;
            }
        }
        return false;
    }

    private boolean checkRow(int player, int row) {
        int count = 0;
        for (int j = 0; j < columna; j++) {
            if (matrizTablero[row][j] == player) {
                count++;
                if (count == 4) {
                    return true;
                }
            } else {
                count = 0;
            }
        }
        return false;
    }



    private boolean checkDiagonal(int player, int row, int col) {
        // Verificar la diagonal (izquierda arriba a derecha abajo)
        int count = 0;
        for (int i = -3; i <= 3; i++) {
            int currentRow = row + i;
            int currentCol = col + i;

            if (isValidPosition(currentRow, currentCol) && matrizTablero[currentRow][currentCol] == player) {
                count++;
                if (count == 4) {
                    return true;
                }
            } else {
                count = 0;
            }
        }

        count = 0;
        for (int i = -3; i <= 3; i++) {
            int currentRow = row - i;
            int currentCol = col + i;

            if (isValidPosition(currentRow, currentCol) && matrizTablero[currentRow][currentCol] == player) {
                count++;
                if (count == 4) {
                    return true;
                }
            } else {
                count = 0;
            }
        }

        return false;
    }

    private boolean isValidPosition(int row, int col) {
        return row >= 0 && row < fila && col >= 0 && col < columna;
    }



    public void inicializarJuego() {

        System.out.println("Juego inicializado");


        empezarTurno();

        // Inicializa el círculo del jugador actual
        jugadorActualCircle = new Circle(50.0);
        jugadorActualCircle.setStroke(Color.BLACK);
        jugadorActualCircle.setStrokeType(StrokeType.INSIDE);
        jugadorActualCircle.setFill(jugadorActual == 1 ? Color.RED : Color.YELLOW);


        tablero.add(jugadorActualCircle, 7, 4);


        turnoCircle = jugadorActualCircle;
    }



    private void empezarTurno() {

        System.out.println("Turno del jugador " + jugadorActual);


        jugadorActualCircle.setFill(jugadorActual == 1 ? Color.RED : Color.YELLOW);
    }


    private void mostrarAlerta(String mensaje) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("¡Fin del juego!");
        alert.setHeaderText(mensaje);

        ButtonType salirButton = new ButtonType("Salir");
        ButtonType reiniciarButton = new ButtonType("Reiniciar");

        alert.getButtonTypes().setAll(salirButton, reiniciarButton);


        alert.showAndWait().ifPresent(response -> {
            if (response == salirButton) {

                System.exit(0);
            } else if (response == reiniciarButton) {
                reiniciarJuego();
            }
        });
    }
    private void reiniciarJuego() {

        for (int i = 0; i < fila; i++) {
            for (int j = 0; j < columna; j++) {
                matrizTablero[i][j] = 0;
                // Actualiza la GUI
                Circle circle = new Circle(50.0);
                circle.setStroke(Color.BLACK);
                circle.setStrokeType(javafx.scene.shape.StrokeType.INSIDE);
                circle.setFill(Color.WHITE);

                tablero.add(circle, j, i);
            }
        }
        jugadorActual=1;

    }




}
